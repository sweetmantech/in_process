/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/signature": {
    /** Upsert Premint Signature */
    post: operations["upsert_premint_signature_signature_post"];
  };
  "/signature/{chain_name}/{collection_address}": {
    /** Get Premint Signatures For Collection */
    get: operations["get_premint_signatures_for_collection_signature__chain_name___collection_address__get"];
  };
  "/signature/{chain_name}/{collection_address}/next_uid": {
    /** Get Next Uid */
    get: operations["get_next_uid_signature__chain_name___collection_address__next_uid_get"];
  };
  "/signature/{chain_name}/{collection_address}/{uid}": {
    /** Get Premint Signature */
    get: operations["get_premint_signature_signature__chain_name___collection_address___uid__get"];
  };
  "/created/{chain_name}/{signer}": {
    /** Get Premint Signatures By Signer */
    get: operations["get_premint_signatures_by_signer_created__chain_name___signer__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * ChainName
     * @description An enumeration.
     * @enum {string}
     */
    ChainName:
      | "ETHEREUM-MAINNET"
      | "ETHEREUM-ROPSTEN"
      | "ETHEREUM-RINKEBY"
      | "ETHEREUM-GOERLI"
      | "ETHEREUM-SEPOLIA"
      | "OPTIMISM-MAINNET"
      | "OPTIMISM-GOERLI"
      | "ZORA-GOERLI"
      | "ZORA-SEPOLIA"
      | "ZORA-MAINNET"
      | "BASE-MAINNET"
      | "BASE-GOERLI"
      | "BASE-SEPOLIA"
      | "PGN-MAINNET"
      | "ARBITRUM-MAINNET"
      | "BLAST-MAINNET";
    /**
     * CollectionCreationConfig
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    CollectionCreationConfig: {
      /** Contractadmin */
      contractAdmin: string;
      /** Contracturi */
      contractURI: string;
      /** Contractname */
      contractName: string;
      /**
       * Additionaladmins
       * @default []
       */
      additionalAdmins?: string[];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * PremintCollection
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    PremintCollection: {
      /** Contract Address */
      contract_address: string;
      /** Contract Admin */
      contract_admin: string;
      /** Contract Uri */
      contract_uri: string;
      /** Contract Name */
      contract_name: string;
      /** Premints */
      premints: (
        | components["schemas"]["SignedPremintConfigV1"]
        | components["schemas"]["SignedPremintConfigV2"]
      )[];
    };
    /**
     * PremintConfigV1
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    PremintConfigV1: {
      /**
       * Config Version
       * @default 1
       * @enum {string}
       */
      config_version?: "1";
      tokenConfig: components["schemas"]["TokenCreationConfigV1"];
      /** Uid */
      uid: number;
      /** Version */
      version: number;
      /** Deleted */
      deleted: boolean;
    };
    /**
     * PremintConfigV2
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    PremintConfigV2: {
      /**
       * Config Version
       * @default 2
       * @enum {string}
       */
      config_version?: "2";
      tokenConfig: components["schemas"]["TokenCreationConfigV2"];
      /** Uid */
      uid: number;
      /** Version */
      version: number;
      /** Deleted */
      deleted: boolean;
    };
    /**
     * PremintNextUid
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    PremintNextUid: {
      /** Next Uid */
      next_uid: number;
    };
    /**
     * PremintRequest
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    PremintRequest: {
      collection?: components["schemas"]["CollectionCreationConfig"];
      /** Premint */
      premint: components["schemas"]["PremintConfigV1"] | components["schemas"]["PremintConfigV2"];
      chain_name: components["schemas"]["ChainName"];
      /** Signature */
      signature: string;
      /** Collection Address */
      collection_address?: string;
    };
    /**
     * PremintSignature
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    PremintSignature: {
      collection?: components["schemas"]["CollectionCreationConfig"];
      /** Premint */
      premint: components["schemas"]["PremintConfigV1"] | components["schemas"]["PremintConfigV2"];
      chain_name: components["schemas"]["ChainName"];
      /** Signature */
      signature: string;
      /** Collection Address */
      collection_address: string;
      /** Signer */
      signer: string;
    };
    /**
     * SignedPremintConfigV1
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    SignedPremintConfigV1: {
      /**
       * Config Version
       * @default 1
       * @enum {string}
       */
      config_version?: "1";
      tokenConfig: components["schemas"]["TokenCreationConfigV1"];
      /** Uid */
      uid: number;
      /** Version */
      version: number;
      /** Deleted */
      deleted: boolean;
      /** Signature */
      signature: string;
    };
    /**
     * SignedPremintConfigV2
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    SignedPremintConfigV2: {
      /**
       * Config Version
       * @default 2
       * @enum {string}
       */
      config_version?: "2";
      tokenConfig: components["schemas"]["TokenCreationConfigV2"];
      /** Uid */
      uid: number;
      /** Version */
      version: number;
      /** Deleted */
      deleted: boolean;
      /** Signature */
      signature: string;
    };
    /**
     * TokenCreationConfigV1
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    TokenCreationConfigV1: {
      /** Tokenuri */
      tokenURI: string;
      /** Maxsupply */
      maxSupply: string;
      /** Maxtokensperaddress */
      maxTokensPerAddress: string;
      /** Pricepertoken */
      pricePerToken: string;
      /** Mintstart */
      mintStart: string;
      /** Mintduration */
      mintDuration: string;
      /** Royaltymintschedule */
      royaltyMintSchedule: number;
      /** Royaltybps */
      royaltyBPS: number;
      /** Royaltyrecipient */
      royaltyRecipient: string;
      /** Fixedpriceminter */
      fixedPriceMinter: string;
    };
    /**
     * TokenCreationConfigV2
     * @description ObjectBase extends Pydantic's BaseModel class to support extra functionality
     * (store_as, override_name), as well as provides other convinience methods.
     * ObjectBase allows for validation and type enforcement, and should be used inheritedfor any
     * complex type we include on a stored entity.
     *
     * Example::
     *     >>> class Foo(ObjectBase):
     *     ...:     found_at_height: int = field(override_name="address", store_as=str)
     *     ...:     other: str = "default"
     */
    TokenCreationConfigV2: {
      /** Tokenuri */
      tokenURI: string;
      /** Maxsupply */
      maxSupply: string;
      /** Maxtokensperaddress */
      maxTokensPerAddress: string;
      /** Pricepertoken */
      pricePerToken: string;
      /** Mintstart */
      mintStart: string;
      /** Mintduration */
      mintDuration: string;
      /** Royaltybps */
      royaltyBPS: number;
      /** Fixedpriceminter */
      fixedPriceMinter: string;
      /** Payoutrecipient */
      payoutRecipient: string;
      /** Createreferral */
      createReferral: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** Upsert Premint Signature */
  upsert_premint_signature_signature_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["PremintRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PremintSignature"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Premint Signatures For Collection */
  get_premint_signatures_for_collection_signature__chain_name___collection_address__get: {
    parameters: {
      path: {
        chain_name: components["schemas"]["ChainName"];
        collection_address: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PremintCollection"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Next Uid */
  get_next_uid_signature__chain_name___collection_address__next_uid_get: {
    parameters: {
      path: {
        chain_name: components["schemas"]["ChainName"];
        collection_address: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PremintNextUid"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Premint Signature */
  get_premint_signature_signature__chain_name___collection_address___uid__get: {
    parameters: {
      path: {
        chain_name: components["schemas"]["ChainName"];
        collection_address: string;
        uid: number;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PremintSignature"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Premint Signatures By Signer */
  get_premint_signatures_by_signer_created__chain_name___signer__get: {
    parameters: {
      path: {
        chain_name: components["schemas"]["ChainName"];
        signer: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PremintCollection"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
